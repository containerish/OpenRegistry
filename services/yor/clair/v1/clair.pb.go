// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: services/yor/clair/v1/clair.proto

package clair

import (
	v1 "github.com/containerish/OpenRegistry/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnableVulnerabilityScanningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId *v1.UUID `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
}

func (x *EnableVulnerabilityScanningRequest) Reset() {
	*x = EnableVulnerabilityScanningRequest{}
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableVulnerabilityScanningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableVulnerabilityScanningRequest) ProtoMessage() {}

func (x *EnableVulnerabilityScanningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableVulnerabilityScanningRequest.ProtoReflect.Descriptor instead.
func (*EnableVulnerabilityScanningRequest) Descriptor() ([]byte, []int) {
	return file_services_yor_clair_v1_clair_proto_rawDescGZIP(), []int{0}
}

func (x *EnableVulnerabilityScanningRequest) GetRepositoryId() *v1.UUID {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

type EnableVulnerabilityScanningResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EnableVulnerabilityScanningResponse) Reset() {
	*x = EnableVulnerabilityScanningResponse{}
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableVulnerabilityScanningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableVulnerabilityScanningResponse) ProtoMessage() {}

func (x *EnableVulnerabilityScanningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableVulnerabilityScanningResponse.ProtoReflect.Descriptor instead.
func (*EnableVulnerabilityScanningResponse) Descriptor() ([]byte, []int) {
	return file_services_yor_clair_v1_clair_proto_rawDescGZIP(), []int{1}
}

func (x *EnableVulnerabilityScanningResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ClairReportPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version string              `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Kind    string              `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Arch    string              `protobuf:"bytes,5,opt,name=arch,proto3" json:"arch,omitempty"`
	Source  *ClairPackageSource `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *ClairReportPackage) Reset() {
	*x = ClairReportPackage{}
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClairReportPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClairReportPackage) ProtoMessage() {}

func (x *ClairReportPackage) ProtoReflect() protoreflect.Message {
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClairReportPackage.ProtoReflect.Descriptor instead.
func (*ClairReportPackage) Descriptor() ([]byte, []int) {
	return file_services_yor_clair_v1_clair_proto_rawDescGZIP(), []int{2}
}

func (x *ClairReportPackage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClairReportPackage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClairReportPackage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ClairReportPackage) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ClairReportPackage) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *ClairReportPackage) GetSource() *ClairPackageSource {
	if x != nil {
		return x.Source
	}
	return nil
}

type SubmitManifestToScanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success       bool                           `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ManifestHash  string                         `protobuf:"bytes,2,opt,name=manifest_hash,json=manifestHash,proto3" json:"manifest_hash,omitempty"`
	State         string                         `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Err           string                         `protobuf:"bytes,4,opt,name=err,proto3" json:"err,omitempty"`
	Packages      map[string]*ClairReportPackage `protobuf:"bytes,5,rep,name=packages,proto3" json:"packages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Distributions map[string]*ClairDistribution  `protobuf:"bytes,6,rep,name=distributions,proto3" json:"distributions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Repository    map[string]*ClairRepository    `protobuf:"bytes,7,rep,name=repository,proto3" json:"repository,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Environments  map[string]*structpb.ListValue `protobuf:"bytes,8,rep,name=environments,proto3" json:"environments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubmitManifestToScanResponse) Reset() {
	*x = SubmitManifestToScanResponse{}
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitManifestToScanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitManifestToScanResponse) ProtoMessage() {}

func (x *SubmitManifestToScanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitManifestToScanResponse.ProtoReflect.Descriptor instead.
func (*SubmitManifestToScanResponse) Descriptor() ([]byte, []int) {
	return file_services_yor_clair_v1_clair_proto_rawDescGZIP(), []int{3}
}

func (x *SubmitManifestToScanResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SubmitManifestToScanResponse) GetManifestHash() string {
	if x != nil {
		return x.ManifestHash
	}
	return ""
}

func (x *SubmitManifestToScanResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SubmitManifestToScanResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *SubmitManifestToScanResponse) GetPackages() map[string]*ClairReportPackage {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *SubmitManifestToScanResponse) GetDistributions() map[string]*ClairDistribution {
	if x != nil {
		return x.Distributions
	}
	return nil
}

func (x *SubmitManifestToScanResponse) GetRepository() map[string]*ClairRepository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *SubmitManifestToScanResponse) GetEnvironments() map[string]*structpb.ListValue {
	if x != nil {
		return x.Environments
	}
	return nil
}

type ClairDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash    string                         `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Uri     string                         `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	Headers map[string]*structpb.ListValue `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ClairDescriptor) Reset() {
	*x = ClairDescriptor{}
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClairDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClairDescriptor) ProtoMessage() {}

func (x *ClairDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClairDescriptor.ProtoReflect.Descriptor instead.
func (*ClairDescriptor) Descriptor() ([]byte, []int) {
	return file_services_yor_clair_v1_clair_proto_rawDescGZIP(), []int{4}
}

func (x *ClairDescriptor) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ClairDescriptor) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *ClairDescriptor) GetHeaders() map[string]*structpb.ListValue {
	if x != nil {
		return x.Headers
	}
	return nil
}

type SubmitManifestToScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *SubmitManifestToScanRequest) Reset() {
	*x = SubmitManifestToScanRequest{}
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitManifestToScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitManifestToScanRequest) ProtoMessage() {}

func (x *SubmitManifestToScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitManifestToScanRequest.ProtoReflect.Descriptor instead.
func (*SubmitManifestToScanRequest) Descriptor() ([]byte, []int) {
	return file_services_yor_clair_v1_clair_proto_rawDescGZIP(), []int{5}
}

func (x *SubmitManifestToScanRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetVulnerabilityReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManifestId string `protobuf:"bytes,1,opt,name=manifest_id,json=manifestId,proto3" json:"manifest_id,omitempty"`
}

func (x *GetVulnerabilityReportRequest) Reset() {
	*x = GetVulnerabilityReportRequest{}
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVulnerabilityReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVulnerabilityReportRequest) ProtoMessage() {}

func (x *GetVulnerabilityReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVulnerabilityReportRequest.ProtoReflect.Descriptor instead.
func (*GetVulnerabilityReportRequest) Descriptor() ([]byte, []int) {
	return file_services_yor_clair_v1_clair_proto_rawDescGZIP(), []int{6}
}

func (x *GetVulnerabilityReportRequest) GetManifestId() string {
	if x != nil {
		return x.ManifestId
	}
	return ""
}

type ClairIndexManifestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash   string             `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Layers []*ClairDescriptor `protobuf:"bytes,2,rep,name=layers,proto3" json:"layers,omitempty"`
}

func (x *ClairIndexManifestRequest) Reset() {
	*x = ClairIndexManifestRequest{}
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClairIndexManifestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClairIndexManifestRequest) ProtoMessage() {}

func (x *ClairIndexManifestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClairIndexManifestRequest.ProtoReflect.Descriptor instead.
func (*ClairIndexManifestRequest) Descriptor() ([]byte, []int) {
	return file_services_yor_clair_v1_clair_proto_rawDescGZIP(), []int{7}
}

func (x *ClairIndexManifestRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ClairIndexManifestRequest) GetLayers() []*ClairDescriptor {
	if x != nil {
		return x.Layers
	}
	return nil
}

type ClairPackageSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Kind    string `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *ClairPackageSource) Reset() {
	*x = ClairPackageSource{}
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClairPackageSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClairPackageSource) ProtoMessage() {}

func (x *ClairPackageSource) ProtoReflect() protoreflect.Message {
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClairPackageSource.ProtoReflect.Descriptor instead.
func (*ClairPackageSource) Descriptor() ([]byte, []int) {
	return file_services_yor_clair_v1_clair_proto_rawDescGZIP(), []int{8}
}

func (x *ClairPackageSource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClairPackageSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClairPackageSource) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ClairPackageSource) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type ClairPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version string              `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Kind    string              `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Source  *ClairPackageSource `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	Arch    string              `protobuf:"bytes,6,opt,name=arch,proto3" json:"arch,omitempty"`
}

func (x *ClairPackage) Reset() {
	*x = ClairPackage{}
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClairPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClairPackage) ProtoMessage() {}

func (x *ClairPackage) ProtoReflect() protoreflect.Message {
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClairPackage.ProtoReflect.Descriptor instead.
func (*ClairPackage) Descriptor() ([]byte, []int) {
	return file_services_yor_clair_v1_clair_proto_rawDescGZIP(), []int{9}
}

func (x *ClairPackage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClairPackage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClairPackage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ClairPackage) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ClairPackage) GetSource() *ClairPackageSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ClairPackage) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

type ClairDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Did             string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	Name            string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version         string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	VersionCodeName string `protobuf:"bytes,5,opt,name=version_code_name,json=versionCodeName,proto3" json:"version_code_name,omitempty"`
	VersionId       string `protobuf:"bytes,6,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	Arch            string `protobuf:"bytes,7,opt,name=arch,proto3" json:"arch,omitempty"`
	Cpe             string `protobuf:"bytes,8,opt,name=cpe,proto3" json:"cpe,omitempty"`
	PrettyName      string `protobuf:"bytes,9,opt,name=pretty_name,json=prettyName,proto3" json:"pretty_name,omitempty"`
}

func (x *ClairDistribution) Reset() {
	*x = ClairDistribution{}
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClairDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClairDistribution) ProtoMessage() {}

func (x *ClairDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClairDistribution.ProtoReflect.Descriptor instead.
func (*ClairDistribution) Descriptor() ([]byte, []int) {
	return file_services_yor_clair_v1_clair_proto_rawDescGZIP(), []int{10}
}

func (x *ClairDistribution) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClairDistribution) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *ClairDistribution) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClairDistribution) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ClairDistribution) GetVersionCodeName() string {
	if x != nil {
		return x.VersionCodeName
	}
	return ""
}

func (x *ClairDistribution) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *ClairDistribution) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *ClairDistribution) GetCpe() string {
	if x != nil {
		return x.Cpe
	}
	return ""
}

func (x *ClairDistribution) GetPrettyName() string {
	if x != nil {
		return x.PrettyName
	}
	return ""
}

type ClairEnvironmentItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageDb      string   `protobuf:"bytes,1,opt,name=package_db,json=packageDb,proto3" json:"package_db,omitempty"`
	IntroducedIn   string   `protobuf:"bytes,2,opt,name=introduced_in,json=introducedIn,proto3" json:"introduced_in,omitempty"`
	DistributionId string   `protobuf:"bytes,3,opt,name=distribution_id,json=distributionId,proto3" json:"distribution_id,omitempty"`
	RepositoryIds  []string `protobuf:"bytes,4,rep,name=repository_ids,json=repositoryIds,proto3" json:"repository_ids,omitempty"`
}

func (x *ClairEnvironmentItem) Reset() {
	*x = ClairEnvironmentItem{}
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClairEnvironmentItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClairEnvironmentItem) ProtoMessage() {}

func (x *ClairEnvironmentItem) ProtoReflect() protoreflect.Message {
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClairEnvironmentItem.ProtoReflect.Descriptor instead.
func (*ClairEnvironmentItem) Descriptor() ([]byte, []int) {
	return file_services_yor_clair_v1_clair_proto_rawDescGZIP(), []int{11}
}

func (x *ClairEnvironmentItem) GetPackageDb() string {
	if x != nil {
		return x.PackageDb
	}
	return ""
}

func (x *ClairEnvironmentItem) GetIntroducedIn() string {
	if x != nil {
		return x.IntroducedIn
	}
	return ""
}

func (x *ClairEnvironmentItem) GetDistributionId() string {
	if x != nil {
		return x.DistributionId
	}
	return ""
}

func (x *ClairEnvironmentItem) GetRepositoryIds() []string {
	if x != nil {
		return x.RepositoryIds
	}
	return nil
}

type ClairRepository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ClairRepository) Reset() {
	*x = ClairRepository{}
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClairRepository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClairRepository) ProtoMessage() {}

func (x *ClairRepository) ProtoReflect() protoreflect.Message {
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClairRepository.ProtoReflect.Descriptor instead.
func (*ClairRepository) Descriptor() ([]byte, []int) {
	return file_services_yor_clair_v1_clair_proto_rawDescGZIP(), []int{12}
}

func (x *ClairRepository) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ClairVulnerability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Updater            string                 `protobuf:"bytes,2,opt,name=updater,proto3" json:"updater,omitempty"`
	Name               string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description        string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Issued             *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=issued,proto3" json:"issued,omitempty"`
	Links              string                 `protobuf:"bytes,6,opt,name=links,proto3" json:"links,omitempty"`
	Severity           string                 `protobuf:"bytes,7,opt,name=severity,proto3" json:"severity,omitempty"`
	NormalizedSeverity string                 `protobuf:"bytes,8,opt,name=normalized_severity,json=normalizedSeverity,proto3" json:"normalized_severity,omitempty"`
	Package            *ClairPackage          `protobuf:"bytes,9,opt,name=package,proto3" json:"package,omitempty"`
	Distribution       *ClairDistribution     `protobuf:"bytes,10,opt,name=distribution,proto3" json:"distribution,omitempty"`
	Repository         *ClairRepository       `protobuf:"bytes,11,opt,name=repository,proto3" json:"repository,omitempty"`
	FixedInVersion     string                 `protobuf:"bytes,12,opt,name=fixed_in_version,json=fixedInVersion,proto3" json:"fixed_in_version,omitempty"`
}

func (x *ClairVulnerability) Reset() {
	*x = ClairVulnerability{}
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClairVulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClairVulnerability) ProtoMessage() {}

func (x *ClairVulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClairVulnerability.ProtoReflect.Descriptor instead.
func (*ClairVulnerability) Descriptor() ([]byte, []int) {
	return file_services_yor_clair_v1_clair_proto_rawDescGZIP(), []int{13}
}

func (x *ClairVulnerability) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClairVulnerability) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *ClairVulnerability) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClairVulnerability) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClairVulnerability) GetIssued() *timestamppb.Timestamp {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *ClairVulnerability) GetLinks() string {
	if x != nil {
		return x.Links
	}
	return ""
}

func (x *ClairVulnerability) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *ClairVulnerability) GetNormalizedSeverity() string {
	if x != nil {
		return x.NormalizedSeverity
	}
	return ""
}

func (x *ClairVulnerability) GetPackage() *ClairPackage {
	if x != nil {
		return x.Package
	}
	return nil
}

func (x *ClairVulnerability) GetDistribution() *ClairDistribution {
	if x != nil {
		return x.Distribution
	}
	return nil
}

func (x *ClairVulnerability) GetRepository() *ClairRepository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *ClairVulnerability) GetFixedInVersion() string {
	if x != nil {
		return x.FixedInVersion
	}
	return ""
}

type ClairEnrichment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ClairEnrichment) Reset() {
	*x = ClairEnrichment{}
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClairEnrichment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClairEnrichment) ProtoMessage() {}

func (x *ClairEnrichment) ProtoReflect() protoreflect.Message {
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClairEnrichment.ProtoReflect.Descriptor instead.
func (*ClairEnrichment) Descriptor() ([]byte, []int) {
	return file_services_yor_clair_v1_clair_proto_rawDescGZIP(), []int{14}
}

func (x *ClairEnrichment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ClairVulnerabilityIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ClairVulnerabilityIdList) Reset() {
	*x = ClairVulnerabilityIdList{}
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClairVulnerabilityIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClairVulnerabilityIdList) ProtoMessage() {}

func (x *ClairVulnerabilityIdList) ProtoReflect() protoreflect.Message {
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClairVulnerabilityIdList.ProtoReflect.Descriptor instead.
func (*ClairVulnerabilityIdList) Descriptor() ([]byte, []int) {
	return file_services_yor_clair_v1_clair_proto_rawDescGZIP(), []int{15}
}

func (x *ClairVulnerabilityIdList) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetVulnerabilityReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManifestHash           string                         `protobuf:"bytes,1,opt,name=manifest_hash,json=manifestHash,proto3" json:"manifest_hash,omitempty"`
	State                  string                         `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Err                    string                         `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
	Success                bool                           `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	Packages               map[string]*ClairPackage       `protobuf:"bytes,5,rep,name=packages,proto3" json:"packages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Distributions          map[string]*ClairDistribution  `protobuf:"bytes,6,rep,name=distributions,proto3" json:"distributions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Environments           map[string]*structpb.ListValue `protobuf:"bytes,7,rep,name=environments,proto3" json:"environments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PackageVulnerabilities map[string]*structpb.ListValue `protobuf:"bytes,8,rep,name=package_vulnerabilities,json=packageVulnerabilities,proto3" json:"package_vulnerabilities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Enrichments            *ClairEnrichment               `protobuf:"bytes,9,opt,name=enrichments,proto3" json:"enrichments,omitempty"`
	Repository             map[string]*ClairRepository    `protobuf:"bytes,10,rep,name=repository,proto3" json:"repository,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Vulnerabilities        map[string]*ClairVulnerability `protobuf:"bytes,11,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetVulnerabilityReportResponse) Reset() {
	*x = GetVulnerabilityReportResponse{}
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVulnerabilityReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVulnerabilityReportResponse) ProtoMessage() {}

func (x *GetVulnerabilityReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_yor_clair_v1_clair_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVulnerabilityReportResponse.ProtoReflect.Descriptor instead.
func (*GetVulnerabilityReportResponse) Descriptor() ([]byte, []int) {
	return file_services_yor_clair_v1_clair_proto_rawDescGZIP(), []int{16}
}

func (x *GetVulnerabilityReportResponse) GetManifestHash() string {
	if x != nil {
		return x.ManifestHash
	}
	return ""
}

func (x *GetVulnerabilityReportResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GetVulnerabilityReportResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *GetVulnerabilityReportResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetVulnerabilityReportResponse) GetPackages() map[string]*ClairPackage {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *GetVulnerabilityReportResponse) GetDistributions() map[string]*ClairDistribution {
	if x != nil {
		return x.Distributions
	}
	return nil
}

func (x *GetVulnerabilityReportResponse) GetEnvironments() map[string]*structpb.ListValue {
	if x != nil {
		return x.Environments
	}
	return nil
}

func (x *GetVulnerabilityReportResponse) GetPackageVulnerabilities() map[string]*structpb.ListValue {
	if x != nil {
		return x.PackageVulnerabilities
	}
	return nil
}

func (x *GetVulnerabilityReportResponse) GetEnrichments() *ClairEnrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *GetVulnerabilityReportResponse) GetRepository() map[string]*ClairRepository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *GetVulnerabilityReportResponse) GetVulnerabilities() map[string]*ClairVulnerability {
	if x != nil {
		return x.Vulnerabilities
	}
	return nil
}

var File_services_yor_clair_v1_clair_proto protoreflect.FileDescriptor

var file_services_yor_clair_v1_clair_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x79, 0x6f, 0x72, 0x2f, 0x63,
	0x6c, 0x61, 0x69, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x79, 0x6f,
	0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x12, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a,
	0x22, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x23, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x12, 0x43,
	0x6c, 0x61, 0x69, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x61, 0x69, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xba, 0x07, 0x0a, 0x1c, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x53,
	0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65,
	0x72, 0x72, 0x12, 0x5d, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x53, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x6c, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x54,
	0x6f, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x63, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x79,
	0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x53, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x69, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x54, 0x6f, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a,
	0x66, 0x0a, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72,
	0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6a, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c,
	0x61, 0x69, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x72, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x65, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x61, 0x69, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x11, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xde, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x69,
	0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x69, 0x12, 0x4d, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x79, 0x6f,
	0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x72,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x1a, 0x56, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x53, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x40, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x6f, 0x0a,
	0x19, 0x43, 0x6c, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x3e,
	0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c,
	0x61, 0x69, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x72, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x66,
	0x0a, 0x12, 0x43, 0x6c, 0x61, 0x69, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x61, 0x69, 0x72,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68,
	0x22, 0xf5, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x61, 0x69, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x74, 0x74,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x65, 0x74, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x61,
	0x69, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x62,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x73, 0x22, 0x21, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x69, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8a, 0x04, 0x0a, 0x12, 0x43, 0x6c, 0x61,
	0x69, 0x72, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x61, 0x69, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x07, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x61, 0x69, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x78, 0x65, 0x64, 0x49, 0x6e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x21, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x69, 0x72, 0x45, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x18, 0x43, 0x6c, 0x61, 0x69,
	0x72, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xe1, 0x0b, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x56, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x5f, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x79, 0x6f,
	0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x6e, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x6b, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x8a,
	0x01, 0x0a, 0x17, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x51, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e,
	0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x75, 0x6c, 0x6e,
	0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x75, 0x6c, 0x6e,
	0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0b, 0x65,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e,
	0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x72, 0x45, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x65, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x74, 0x0a, 0x0f,
	0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x75, 0x6c,
	0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x1a, 0x60, 0x0a, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61,
	0x69, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6a, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x5b, 0x0a, 0x11, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x65, 0x0a,
	0x1b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x65, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x61, 0x69, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6d, 0x0a, 0x14, 0x56,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61,
	0x69, 0x72, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xb5, 0x03, 0x0a, 0x0c, 0x43,
	0x6c, 0x61, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x14,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x54, 0x6f,
	0x53, 0x63, 0x61, 0x6e, 0x12, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x53, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x54,
	0x6f, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x87, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e,
	0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x75, 0x6c, 0x6e,
	0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x1b, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0xe0, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x79, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x76, 0x31,
	0x42, 0x0a, 0x43, 0x6c, 0x61, 0x69, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x40,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x69, 0x73, 0x68, 0x2f, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x79, 0x6f,
	0x72, 0x2f, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6c, 0x61, 0x69, 0x72,
	0xa2, 0x02, 0x03, 0x53, 0x59, 0x43, 0xaa, 0x02, 0x15, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x59, 0x6f, 0x72, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x15, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x59, 0x6f, 0x72, 0x5c, 0x43, 0x6c,
	0x61, 0x69, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x21, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x5c, 0x59, 0x6f, 0x72, 0x5c, 0x43, 0x6c, 0x61, 0x69, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x18, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x3a, 0x59, 0x6f, 0x72, 0x3a, 0x3a, 0x43, 0x6c, 0x61, 0x69,
	0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_yor_clair_v1_clair_proto_rawDescOnce sync.Once
	file_services_yor_clair_v1_clair_proto_rawDescData = file_services_yor_clair_v1_clair_proto_rawDesc
)

func file_services_yor_clair_v1_clair_proto_rawDescGZIP() []byte {
	file_services_yor_clair_v1_clair_proto_rawDescOnce.Do(func() {
		file_services_yor_clair_v1_clair_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_yor_clair_v1_clair_proto_rawDescData)
	})
	return file_services_yor_clair_v1_clair_proto_rawDescData
}

var file_services_yor_clair_v1_clair_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_services_yor_clair_v1_clair_proto_goTypes = []any{
	(*EnableVulnerabilityScanningRequest)(nil),  // 0: services.yor.clair.v1.EnableVulnerabilityScanningRequest
	(*EnableVulnerabilityScanningResponse)(nil), // 1: services.yor.clair.v1.EnableVulnerabilityScanningResponse
	(*ClairReportPackage)(nil),                  // 2: services.yor.clair.v1.ClairReportPackage
	(*SubmitManifestToScanResponse)(nil),        // 3: services.yor.clair.v1.SubmitManifestToScanResponse
	(*ClairDescriptor)(nil),                     // 4: services.yor.clair.v1.ClairDescriptor
	(*SubmitManifestToScanRequest)(nil),         // 5: services.yor.clair.v1.SubmitManifestToScanRequest
	(*GetVulnerabilityReportRequest)(nil),       // 6: services.yor.clair.v1.GetVulnerabilityReportRequest
	(*ClairIndexManifestRequest)(nil),           // 7: services.yor.clair.v1.ClairIndexManifestRequest
	(*ClairPackageSource)(nil),                  // 8: services.yor.clair.v1.ClairPackageSource
	(*ClairPackage)(nil),                        // 9: services.yor.clair.v1.ClairPackage
	(*ClairDistribution)(nil),                   // 10: services.yor.clair.v1.ClairDistribution
	(*ClairEnvironmentItem)(nil),                // 11: services.yor.clair.v1.ClairEnvironmentItem
	(*ClairRepository)(nil),                     // 12: services.yor.clair.v1.ClairRepository
	(*ClairVulnerability)(nil),                  // 13: services.yor.clair.v1.ClairVulnerability
	(*ClairEnrichment)(nil),                     // 14: services.yor.clair.v1.ClairEnrichment
	(*ClairVulnerabilityIdList)(nil),            // 15: services.yor.clair.v1.ClairVulnerabilityIdList
	(*GetVulnerabilityReportResponse)(nil),      // 16: services.yor.clair.v1.GetVulnerabilityReportResponse
	nil,                                         // 17: services.yor.clair.v1.SubmitManifestToScanResponse.PackagesEntry
	nil,                                         // 18: services.yor.clair.v1.SubmitManifestToScanResponse.DistributionsEntry
	nil,                                         // 19: services.yor.clair.v1.SubmitManifestToScanResponse.RepositoryEntry
	nil,                                         // 20: services.yor.clair.v1.SubmitManifestToScanResponse.EnvironmentsEntry
	nil,                                         // 21: services.yor.clair.v1.ClairDescriptor.HeadersEntry
	nil,                                         // 22: services.yor.clair.v1.GetVulnerabilityReportResponse.PackagesEntry
	nil,                                         // 23: services.yor.clair.v1.GetVulnerabilityReportResponse.DistributionsEntry
	nil,                                         // 24: services.yor.clair.v1.GetVulnerabilityReportResponse.EnvironmentsEntry
	nil,                                         // 25: services.yor.clair.v1.GetVulnerabilityReportResponse.PackageVulnerabilitiesEntry
	nil,                                         // 26: services.yor.clair.v1.GetVulnerabilityReportResponse.RepositoryEntry
	nil,                                         // 27: services.yor.clair.v1.GetVulnerabilityReportResponse.VulnerabilitiesEntry
	(*v1.UUID)(nil),                             // 28: common.v1.UUID
	(*timestamppb.Timestamp)(nil),               // 29: google.protobuf.Timestamp
	(*structpb.ListValue)(nil),                  // 30: google.protobuf.ListValue
}
var file_services_yor_clair_v1_clair_proto_depIdxs = []int32{
	28, // 0: services.yor.clair.v1.EnableVulnerabilityScanningRequest.repository_id:type_name -> common.v1.UUID
	8,  // 1: services.yor.clair.v1.ClairReportPackage.source:type_name -> services.yor.clair.v1.ClairPackageSource
	17, // 2: services.yor.clair.v1.SubmitManifestToScanResponse.packages:type_name -> services.yor.clair.v1.SubmitManifestToScanResponse.PackagesEntry
	18, // 3: services.yor.clair.v1.SubmitManifestToScanResponse.distributions:type_name -> services.yor.clair.v1.SubmitManifestToScanResponse.DistributionsEntry
	19, // 4: services.yor.clair.v1.SubmitManifestToScanResponse.repository:type_name -> services.yor.clair.v1.SubmitManifestToScanResponse.RepositoryEntry
	20, // 5: services.yor.clair.v1.SubmitManifestToScanResponse.environments:type_name -> services.yor.clair.v1.SubmitManifestToScanResponse.EnvironmentsEntry
	21, // 6: services.yor.clair.v1.ClairDescriptor.headers:type_name -> services.yor.clair.v1.ClairDescriptor.HeadersEntry
	4,  // 7: services.yor.clair.v1.ClairIndexManifestRequest.layers:type_name -> services.yor.clair.v1.ClairDescriptor
	8,  // 8: services.yor.clair.v1.ClairPackage.source:type_name -> services.yor.clair.v1.ClairPackageSource
	29, // 9: services.yor.clair.v1.ClairVulnerability.issued:type_name -> google.protobuf.Timestamp
	9,  // 10: services.yor.clair.v1.ClairVulnerability.package:type_name -> services.yor.clair.v1.ClairPackage
	10, // 11: services.yor.clair.v1.ClairVulnerability.distribution:type_name -> services.yor.clair.v1.ClairDistribution
	12, // 12: services.yor.clair.v1.ClairVulnerability.repository:type_name -> services.yor.clair.v1.ClairRepository
	22, // 13: services.yor.clair.v1.GetVulnerabilityReportResponse.packages:type_name -> services.yor.clair.v1.GetVulnerabilityReportResponse.PackagesEntry
	23, // 14: services.yor.clair.v1.GetVulnerabilityReportResponse.distributions:type_name -> services.yor.clair.v1.GetVulnerabilityReportResponse.DistributionsEntry
	24, // 15: services.yor.clair.v1.GetVulnerabilityReportResponse.environments:type_name -> services.yor.clair.v1.GetVulnerabilityReportResponse.EnvironmentsEntry
	25, // 16: services.yor.clair.v1.GetVulnerabilityReportResponse.package_vulnerabilities:type_name -> services.yor.clair.v1.GetVulnerabilityReportResponse.PackageVulnerabilitiesEntry
	14, // 17: services.yor.clair.v1.GetVulnerabilityReportResponse.enrichments:type_name -> services.yor.clair.v1.ClairEnrichment
	26, // 18: services.yor.clair.v1.GetVulnerabilityReportResponse.repository:type_name -> services.yor.clair.v1.GetVulnerabilityReportResponse.RepositoryEntry
	27, // 19: services.yor.clair.v1.GetVulnerabilityReportResponse.vulnerabilities:type_name -> services.yor.clair.v1.GetVulnerabilityReportResponse.VulnerabilitiesEntry
	2,  // 20: services.yor.clair.v1.SubmitManifestToScanResponse.PackagesEntry.value:type_name -> services.yor.clair.v1.ClairReportPackage
	10, // 21: services.yor.clair.v1.SubmitManifestToScanResponse.DistributionsEntry.value:type_name -> services.yor.clair.v1.ClairDistribution
	12, // 22: services.yor.clair.v1.SubmitManifestToScanResponse.RepositoryEntry.value:type_name -> services.yor.clair.v1.ClairRepository
	30, // 23: services.yor.clair.v1.SubmitManifestToScanResponse.EnvironmentsEntry.value:type_name -> google.protobuf.ListValue
	30, // 24: services.yor.clair.v1.ClairDescriptor.HeadersEntry.value:type_name -> google.protobuf.ListValue
	9,  // 25: services.yor.clair.v1.GetVulnerabilityReportResponse.PackagesEntry.value:type_name -> services.yor.clair.v1.ClairPackage
	10, // 26: services.yor.clair.v1.GetVulnerabilityReportResponse.DistributionsEntry.value:type_name -> services.yor.clair.v1.ClairDistribution
	30, // 27: services.yor.clair.v1.GetVulnerabilityReportResponse.EnvironmentsEntry.value:type_name -> google.protobuf.ListValue
	30, // 28: services.yor.clair.v1.GetVulnerabilityReportResponse.PackageVulnerabilitiesEntry.value:type_name -> google.protobuf.ListValue
	12, // 29: services.yor.clair.v1.GetVulnerabilityReportResponse.RepositoryEntry.value:type_name -> services.yor.clair.v1.ClairRepository
	13, // 30: services.yor.clair.v1.GetVulnerabilityReportResponse.VulnerabilitiesEntry.value:type_name -> services.yor.clair.v1.ClairVulnerability
	5,  // 31: services.yor.clair.v1.ClairService.SubmitManifestToScan:input_type -> services.yor.clair.v1.SubmitManifestToScanRequest
	6,  // 32: services.yor.clair.v1.ClairService.GetVulnerabilityReport:input_type -> services.yor.clair.v1.GetVulnerabilityReportRequest
	0,  // 33: services.yor.clair.v1.ClairService.EnableVulnerabilityScanning:input_type -> services.yor.clair.v1.EnableVulnerabilityScanningRequest
	3,  // 34: services.yor.clair.v1.ClairService.SubmitManifestToScan:output_type -> services.yor.clair.v1.SubmitManifestToScanResponse
	16, // 35: services.yor.clair.v1.ClairService.GetVulnerabilityReport:output_type -> services.yor.clair.v1.GetVulnerabilityReportResponse
	1,  // 36: services.yor.clair.v1.ClairService.EnableVulnerabilityScanning:output_type -> services.yor.clair.v1.EnableVulnerabilityScanningResponse
	34, // [34:37] is the sub-list for method output_type
	31, // [31:34] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_services_yor_clair_v1_clair_proto_init() }
func file_services_yor_clair_v1_clair_proto_init() {
	if File_services_yor_clair_v1_clair_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_yor_clair_v1_clair_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_yor_clair_v1_clair_proto_goTypes,
		DependencyIndexes: file_services_yor_clair_v1_clair_proto_depIdxs,
		MessageInfos:      file_services_yor_clair_v1_clair_proto_msgTypes,
	}.Build()
	File_services_yor_clair_v1_clair_proto = out.File
	file_services_yor_clair_v1_clair_proto_rawDesc = nil
	file_services_yor_clair_v1_clair_proto_goTypes = nil
	file_services_yor_clair_v1_clair_proto_depIdxs = nil
}
