// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/kon/github_actions/v1/build_project.proto

package github_actions_v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/containerish/OpenRegistry/services/kon/github_actions/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GitHubActionsProjectServiceName is the fully-qualified name of the GitHubActionsProjectService
	// service.
	GitHubActionsProjectServiceName = "services.kon.github_actions.v1.GitHubActionsProjectService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GitHubActionsProjectServiceCreateProjectProcedure is the fully-qualified name of the
	// GitHubActionsProjectService's CreateProject RPC.
	GitHubActionsProjectServiceCreateProjectProcedure = "/services.kon.github_actions.v1.GitHubActionsProjectService/CreateProject"
	// GitHubActionsProjectServiceGetProjectProcedure is the fully-qualified name of the
	// GitHubActionsProjectService's GetProject RPC.
	GitHubActionsProjectServiceGetProjectProcedure = "/services.kon.github_actions.v1.GitHubActionsProjectService/GetProject"
	// GitHubActionsProjectServiceDeleteProjectProcedure is the fully-qualified name of the
	// GitHubActionsProjectService's DeleteProject RPC.
	GitHubActionsProjectServiceDeleteProjectProcedure = "/services.kon.github_actions.v1.GitHubActionsProjectService/DeleteProject"
	// GitHubActionsProjectServiceListProjectsProcedure is the fully-qualified name of the
	// GitHubActionsProjectService's ListProjects RPC.
	GitHubActionsProjectServiceListProjectsProcedure = "/services.kon.github_actions.v1.GitHubActionsProjectService/ListProjects"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	gitHubActionsProjectServiceServiceDescriptor             = v1.File_services_kon_github_actions_v1_build_project_proto.Services().ByName("GitHubActionsProjectService")
	gitHubActionsProjectServiceCreateProjectMethodDescriptor = gitHubActionsProjectServiceServiceDescriptor.Methods().ByName("CreateProject")
	gitHubActionsProjectServiceGetProjectMethodDescriptor    = gitHubActionsProjectServiceServiceDescriptor.Methods().ByName("GetProject")
	gitHubActionsProjectServiceDeleteProjectMethodDescriptor = gitHubActionsProjectServiceServiceDescriptor.Methods().ByName("DeleteProject")
	gitHubActionsProjectServiceListProjectsMethodDescriptor  = gitHubActionsProjectServiceServiceDescriptor.Methods().ByName("ListProjects")
)

// GitHubActionsProjectServiceClient is a client for the
// services.kon.github_actions.v1.GitHubActionsProjectService service.
type GitHubActionsProjectServiceClient interface {
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error)
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error)
	ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error)
}

// NewGitHubActionsProjectServiceClient constructs a client for the
// services.kon.github_actions.v1.GitHubActionsProjectService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGitHubActionsProjectServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GitHubActionsProjectServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gitHubActionsProjectServiceClient{
		createProject: connect.NewClient[v1.CreateProjectRequest, v1.CreateProjectResponse](
			httpClient,
			baseURL+GitHubActionsProjectServiceCreateProjectProcedure,
			connect.WithSchema(gitHubActionsProjectServiceCreateProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProject: connect.NewClient[v1.GetProjectRequest, v1.GetProjectResponse](
			httpClient,
			baseURL+GitHubActionsProjectServiceGetProjectProcedure,
			connect.WithSchema(gitHubActionsProjectServiceGetProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteProject: connect.NewClient[v1.DeleteProjectRequest, v1.DeleteProjectResponse](
			httpClient,
			baseURL+GitHubActionsProjectServiceDeleteProjectProcedure,
			connect.WithSchema(gitHubActionsProjectServiceDeleteProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listProjects: connect.NewClient[v1.ListProjectsRequest, v1.ListProjectsResponse](
			httpClient,
			baseURL+GitHubActionsProjectServiceListProjectsProcedure,
			connect.WithSchema(gitHubActionsProjectServiceListProjectsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// gitHubActionsProjectServiceClient implements GitHubActionsProjectServiceClient.
type gitHubActionsProjectServiceClient struct {
	createProject *connect.Client[v1.CreateProjectRequest, v1.CreateProjectResponse]
	getProject    *connect.Client[v1.GetProjectRequest, v1.GetProjectResponse]
	deleteProject *connect.Client[v1.DeleteProjectRequest, v1.DeleteProjectResponse]
	listProjects  *connect.Client[v1.ListProjectsRequest, v1.ListProjectsResponse]
}

// CreateProject calls services.kon.github_actions.v1.GitHubActionsProjectService.CreateProject.
func (c *gitHubActionsProjectServiceClient) CreateProject(ctx context.Context, req *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// GetProject calls services.kon.github_actions.v1.GitHubActionsProjectService.GetProject.
func (c *gitHubActionsProjectServiceClient) GetProject(ctx context.Context, req *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return c.getProject.CallUnary(ctx, req)
}

// DeleteProject calls services.kon.github_actions.v1.GitHubActionsProjectService.DeleteProject.
func (c *gitHubActionsProjectServiceClient) DeleteProject(ctx context.Context, req *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error) {
	return c.deleteProject.CallUnary(ctx, req)
}

// ListProjects calls services.kon.github_actions.v1.GitHubActionsProjectService.ListProjects.
func (c *gitHubActionsProjectServiceClient) ListProjects(ctx context.Context, req *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error) {
	return c.listProjects.CallUnary(ctx, req)
}

// GitHubActionsProjectServiceHandler is an implementation of the
// services.kon.github_actions.v1.GitHubActionsProjectService service.
type GitHubActionsProjectServiceHandler interface {
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error)
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error)
	ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error)
}

// NewGitHubActionsProjectServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGitHubActionsProjectServiceHandler(svc GitHubActionsProjectServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gitHubActionsProjectServiceCreateProjectHandler := connect.NewUnaryHandler(
		GitHubActionsProjectServiceCreateProjectProcedure,
		svc.CreateProject,
		connect.WithSchema(gitHubActionsProjectServiceCreateProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gitHubActionsProjectServiceGetProjectHandler := connect.NewUnaryHandler(
		GitHubActionsProjectServiceGetProjectProcedure,
		svc.GetProject,
		connect.WithSchema(gitHubActionsProjectServiceGetProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gitHubActionsProjectServiceDeleteProjectHandler := connect.NewUnaryHandler(
		GitHubActionsProjectServiceDeleteProjectProcedure,
		svc.DeleteProject,
		connect.WithSchema(gitHubActionsProjectServiceDeleteProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gitHubActionsProjectServiceListProjectsHandler := connect.NewUnaryHandler(
		GitHubActionsProjectServiceListProjectsProcedure,
		svc.ListProjects,
		connect.WithSchema(gitHubActionsProjectServiceListProjectsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/services.kon.github_actions.v1.GitHubActionsProjectService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GitHubActionsProjectServiceCreateProjectProcedure:
			gitHubActionsProjectServiceCreateProjectHandler.ServeHTTP(w, r)
		case GitHubActionsProjectServiceGetProjectProcedure:
			gitHubActionsProjectServiceGetProjectHandler.ServeHTTP(w, r)
		case GitHubActionsProjectServiceDeleteProjectProcedure:
			gitHubActionsProjectServiceDeleteProjectHandler.ServeHTTP(w, r)
		case GitHubActionsProjectServiceListProjectsProcedure:
			gitHubActionsProjectServiceListProjectsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGitHubActionsProjectServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGitHubActionsProjectServiceHandler struct{}

func (UnimplementedGitHubActionsProjectServiceHandler) CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.kon.github_actions.v1.GitHubActionsProjectService.CreateProject is not implemented"))
}

func (UnimplementedGitHubActionsProjectServiceHandler) GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.kon.github_actions.v1.GitHubActionsProjectService.GetProject is not implemented"))
}

func (UnimplementedGitHubActionsProjectServiceHandler) DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.kon.github_actions.v1.GitHubActionsProjectService.DeleteProject is not implemented"))
}

func (UnimplementedGitHubActionsProjectServiceHandler) ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.kon.github_actions.v1.GitHubActionsProjectService.ListProjects is not implemented"))
}
