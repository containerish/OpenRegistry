syntax = "proto3";

package services.kon.github_actions.v1;

option go_package = "github.com/containerish/OpenRegistry/services/kon/github_actions/v1;github_actions_v1";

service GitHubActionsLogsService {
  rpc StreamWorkflowRunLogs(StreamWorkflowRunLogsRequest) returns (stream StreamWorkflowRunLogsResponse) {}
  rpc DumpLogs(DumpLogsRequest) returns (DumpLogsResponse) {}
}

message DumpLogsRequest {
  string repo_owner = 1;
  string repo_name = 2;
  int64 run_id = 3;
  bool skip_to_previous_run = 4;
}

message DumpLogsResponse {
  repeated string logs = 1;
}

message StreamWorkflowRunLogsRequest {
  string repo_owner = 1;
  string repo_name = 2;
  int64 run_id = 3;
  bool skip_to_previous_run = 4;
}
message StreamWorkflowDispatchLogsRequest {
  string repo_owner = 1;
  string repo_name = 2;
  int64 dispatch_id = 3;
}

message StreamWorkflowRunLogsResponse {
  string log_message = 1;
  StreamWorkflowRunMessageType msg_type = 2;
}

message StreamWorkflowDispatchLogsResponse {
  string log_message = 1;
}

enum StreamWorkflowRunMessageType {
  STREAM_WORKFLOW_RUN_MESSAGE_TYPE_UNSPECIFIED = 0;
  STREAM_WORKFLOW_RUN_MESSAGE_TYPE_WAIT = 1;
  STREAM_WORKFLOW_RUN_MESSAGE_TYPE_LOG = 2;
  STREAM_WORKFLOW_RUN_MESSAGE_TYPE_PROCESSING = 3;
  STREAM_WORKFLOW_RUN_MESSAGE_TYPE_STEP = 4;
}
